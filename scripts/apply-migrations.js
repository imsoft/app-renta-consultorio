#!/usr/bin/env node

/**
 * Script para aplicar todas las migraciones autom√°ticamente a Supabase
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ APLICANDO MIGRACIONES A SUPABASE');
console.log('===================================\n');

// Colores para la consola
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

const log = {
  success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
  info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è  ${msg}${colors.reset}`),
  section: (msg) => console.log(`\n${colors.bold}${colors.cyan}üìã ${msg}${colors.reset}`),
  action: (msg) => console.log(`${colors.magenta}üéØ ${msg}${colors.reset}`)
};

// Obtener las migraciones en orden
const migrationPath = 'supabase/migrations';
const migrations = fs.readdirSync(migrationPath)
  .filter(f => f.endsWith('.sql'))
  .sort()
  .map(filename => ({
    name: filename.replace('.sql', ''),
    filename,
    path: path.join(migrationPath, filename),
    content: fs.readFileSync(path.join(migrationPath, filename), 'utf8')
  }));

log.section('Migraciones encontradas');
migrations.forEach((migration, index) => {
  log.info(`${index + 1}. ${migration.filename}`);
});

log.section('INSTRUCCIONES PARA APLICAR MIGRACIONES');

log.action('Sigue estos pasos:');
console.log('1. üåê Ve a tu Dashboard de Supabase: https://supabase.com/dashboard');
console.log('2. üìÇ Selecciona tu proyecto WellPoint');
console.log('3. üõ†Ô∏è  Haz clic en "SQL Editor" en el men√∫ lateral');
console.log('4. ‚ûï Haz clic en "New query"');
console.log('5. üìã Copia y pega cada migraci√≥n en el orden mostrado');
console.log('6. ‚ñ∂Ô∏è  Haz clic en "Run" despu√©s de cada una');

log.section('MIGRACIONES A APLICAR (EN ORDEN)');

migrations.forEach((migration, index) => {
  console.log(`\n${colors.bold}${colors.magenta}=== MIGRACI√ìN ${index + 1}: ${migration.filename} ===${colors.reset}`);
  console.log(`${colors.cyan}--- COPIAR DESDE AQU√ç ---${colors.reset}`);
  console.log(migration.content);
  console.log(`${colors.cyan}--- COPIAR HASTA AQU√ç ---${colors.reset}`);
  
  if (index < migrations.length - 1) {
    console.log(`\n${colors.yellow}‚ö†Ô∏è  Despu√©s de ejecutar esta migraci√≥n, contin√∫a con la siguiente...${colors.reset}`);
  }
});

log.section('VERIFICACI√ìN DESPU√âS DE APLICAR');

console.log(`
${colors.bold}Para verificar que todo se aplic√≥ correctamente:${colors.reset}

1. En Supabase Dashboard > Table Editor, deber√≠as ver:
   ${colors.green}‚úÖ profiles${colors.reset}
   ${colors.green}‚úÖ consultorios${colors.reset}
   ${colors.green}‚úÖ reservas${colors.reset}
   ${colors.green}‚úÖ favoritos${colors.reset}
   ${colors.green}‚úÖ calificaciones${colors.reset}

2. En Supabase Dashboard > Storage, deber√≠as ver:
   ${colors.green}‚úÖ avatars bucket${colors.reset}
   ${colors.green}‚úÖ consultorios bucket${colors.reset}

3. Ejecuta esta query de verificaci√≥n en SQL Editor:
`);

console.log(`${colors.cyan}--- QUERY DE VERIFICACI√ìN ---${colors.reset}`);
console.log(`-- Verificar tablas
SELECT table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_type = 'BASE TABLE'
ORDER BY table_name;

-- Verificar storage buckets
SELECT name FROM storage.buckets;

-- Verificar pol√≠ticas RLS
SELECT schemaname, tablename, policyname 
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;`);

console.log(`${colors.cyan}--- FIN QUERY ---${colors.reset}`);

log.section('¬øTODO LISTO?');

console.log(`
${colors.bold}Una vez aplicadas todas las migraciones:${colors.reset}

${colors.green}1. ‚úÖ Ejecuta: node scripts/final-verification.js${colors.reset}
${colors.green}2. ‚úÖ Ve a: http://localhost:3000/registro${colors.reset}
${colors.green}3. ‚úÖ Crea una cuenta de prueba${colors.reset}
${colors.green}4. ‚úÖ Prueba crear un consultorio${colors.reset}
${colors.green}5. ‚úÖ ¬°Disfruta WellPoint!${colors.reset}

${colors.yellow}üìû Si hay alg√∫n problema, revisa los logs en:${colors.reset}
${colors.yellow}   Supabase Dashboard > Logs > Database${colors.reset}
`);

log.success('¬°Migraciones preparadas para aplicar!');
