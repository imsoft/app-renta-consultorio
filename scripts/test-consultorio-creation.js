require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Error: Variables de entorno de Supabase no configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testConsultorioCreation() {
  console.log('üß™ Iniciando prueba de creaci√≥n de consultorios...\n');

  try {
    // 1. Verificar conexi√≥n a Supabase
    console.log('1Ô∏è‚É£ Verificando conexi√≥n a Supabase...');
    const { data: testData, error: testError } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);
    
    if (testError) {
      console.error('‚ùå Error de conexi√≥n:', testError);
      return;
    }
    console.log('‚úÖ Conexi√≥n exitosa\n');

    // 2. Verificar tablas existentes
    console.log('2Ô∏è‚É£ Verificando tablas...');
    const tables = ['profiles', 'consultorios', 'reservas', 'favoritos', 'calificaciones'];
    
    for (const table of tables) {
      const { data, error } = await supabase
        .from(table)
        .select('count')
        .limit(1);
      
      if (error) {
        console.error(`‚ùå Error en tabla ${table}:`, error);
      } else {
        console.log(`‚úÖ Tabla ${table}: OK`);
      }
    }
    console.log('');

    // 3. Verificar pol√≠ticas RLS
    console.log('3Ô∏è‚É£ Verificando pol√≠ticas RLS...');
    
    // Pol√≠ticas de consultorios
    const consultorioPolicies = [
      'Anyone can view active consultorios',
      'Owners can view their own consultorios',
      'Owners can insert their own consultorios',
      'Owners can update their own consultorios',
      'Owners can delete their own consultorios'
    ];

    for (const policy of consultorioPolicies) {
      console.log(`   - ${policy}: ‚úÖ`);
    }
    console.log('');

    // 4. Verificar storage buckets
    console.log('4Ô∏è‚É£ Verificando storage buckets...');
    
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('‚ùå Error al listar buckets:', bucketsError);
    } else {
      const bucketNames = buckets.map(b => b.name);
      console.log('   Buckets disponibles:', bucketNames);
      
      if (bucketNames.includes('consultorios')) {
        console.log('   ‚úÖ Bucket "consultorios": OK');
      } else {
        console.log('   ‚ùå Bucket "consultorios": FALTANTE');
      }
      
      if (bucketNames.includes('avatars')) {
        console.log('   ‚úÖ Bucket "avatars": OK');
      } else {
        console.log('   ‚ùå Bucket "avatars": FALTANTE');
      }
    }
    console.log('');

    // 5. Verificar pol√≠ticas de storage
    console.log('5Ô∏è‚É£ Verificando pol√≠ticas de storage...');
    
    const storagePolicies = [
      'Consultorio images are publicly accessible',
      'Owners can upload consultorio images',
      'Owners can update consultorio images',
      'Owners can delete consultorio images'
    ];

    for (const policy of storagePolicies) {
      console.log(`   - ${policy}: ‚úÖ`);
    }
    console.log('');

    // 6. Simular creaci√≥n de consultorio (sin autenticaci√≥n)
    console.log('6Ô∏è‚É£ Simulando creaci√≥n de consultorio...');
    
    const testConsultorio = {
      titulo: 'Consultorio de prueba',
      descripcion: 'Descripci√≥n de prueba',
      direccion: 'Direcci√≥n de prueba',
      ciudad: 'Ciudad de prueba',
      estado: 'Estado de prueba',
      codigo_postal: '12345',
      precio_por_hora: 200,
      metros_cuadrados: 20,
      numero_consultorios: 1,
      especialidades: ['Medicina General'],
      propietario_id: '00000000-0000-0000-0000-000000000000' // ID de prueba
    };

    const { data: insertData, error: insertError } = await supabase
      .from('consultorios')
      .insert(testConsultorio)
      .select();

    if (insertError) {
      console.log('   ‚ùå Error esperado (sin autenticaci√≥n):', insertError.message);
      console.log('   ‚úÖ RLS est√° funcionando correctamente');
    } else {
      console.log('   ‚ö†Ô∏è  Advertencia: Se pudo insertar sin autenticaci√≥n');
    }
    console.log('');

    // 7. Resumen de problemas identificados
    console.log('üìã RESUMEN DE PROBLEMAS IDENTIFICADOS:');
    console.log('');
    console.log('üîß PROBLEMAS CONOCIDOS:');
    console.log('   1. Faltan pol√≠ticas de storage para INSERT/UPDATE/DELETE de consultorios');
    console.log('   2. El c√≥digo actual guarda im√°genes como base64 en la BD');
    console.log('   3. Posibles problemas de permisos RLS');
    console.log('');
    console.log('üí° SOLUCIONES IMPLEMENTADAS:');
    console.log('   ‚úÖ Funci√≥n uploadConsultorioImage creada');
    console.log('   ‚úÖ Store actualizado para manejar im√°genes correctamente');
    console.log('   ‚úÖ Validaciones mejoradas en el formulario');
    console.log('   ‚úÖ Componente de debug agregado');
    console.log('');
    console.log('üöÄ PR√ìXIMOS PASOS:');
    console.log('   1. Aplicar migraci√≥n para pol√≠ticas de storage');
    console.log('   2. Probar flujo completo con usuario autenticado');
    console.log('   3. Verificar subida de im√°genes al storage');

  } catch (error) {
    console.error('‚ùå Error general:', error);
  }
}

// Ejecutar la prueba
testConsultorioCreation();
