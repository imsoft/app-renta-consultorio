#!/usr/bin/env node

/**
 * Script espec√≠fico para diagnosticar problemas de Google OAuth
 * Identifica problemas comunes en la configuraci√≥n y implementaci√≥n
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// Cargar variables de entorno manualmente
function loadEnvFile(filePath) {
  try {
    const envContent = fs.readFileSync(filePath, 'utf8');
    const envVars = {};
    
    envContent.split('\n').forEach(line => {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        const value = valueParts.join('=').trim();
        if (!key.startsWith('#')) {
          envVars[key.trim()] = value;
        }
      }
    });
    
    return envVars;
  } catch (error) {
    console.error('Error cargando .env.local:', error.message);
    return {};
  }
}

const envVars = loadEnvFile('.env.local');
Object.keys(envVars).forEach(key => {
  process.env[key] = envVars[key];
});

// Verificar variables de entorno
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Error: Variables de entorno faltantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkSupabaseOAuthConfig() {
  console.log('üîç VERIFICANDO CONFIGURACI√ìN DE OAUTH EN SUPABASE');
  console.log('=' .repeat(60));
  
  try {
    // Verificar que Google OAuth est√© habilitado
    console.log('\n1Ô∏è‚É£ Verificando configuraci√≥n de Google OAuth...');
    
    // Intentar obtener la configuraci√≥n de OAuth
    const { data: authConfig, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.error('‚ùå Error accediendo a configuraci√≥n de auth:', authError.message);
      return false;
    }
    
    console.log('‚úÖ Configuraci√≥n de auth accesible');
    
    // Verificar si hay usuarios con provider Google
    const googleUsers = authConfig.users.filter(user => 
      user.app_metadata?.provider === 'google' || 
      user.identities?.some(identity => identity.provider === 'google')
    );
    
    console.log(`üìä Usuarios con Google OAuth: ${googleUsers.length}`);
    
    if (googleUsers.length > 0) {
      console.log('‚úÖ Hay usuarios registrados con Google OAuth');
      googleUsers.forEach(user => {
        console.log(`   - ${user.email} (${user.id})`);
      });
    } else {
      console.log('‚ö†Ô∏è  No hay usuarios registrados con Google OAuth');
    }
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Error verificando configuraci√≥n OAuth:', error.message);
    return false;
  }
}

async function checkCodeImplementation() {
  console.log('\n2Ô∏è‚É£ VERIFICANDO IMPLEMENTACI√ìN EN C√ìDIGO');
  console.log('=' .repeat(60));
  
  const issues = [];
  
  try {
    // Verificar supabaseStore.ts
    const supabaseStorePath = 'src/stores/supabaseStore.ts';
    if (fs.existsSync(supabaseStorePath)) {
      const content = fs.readFileSync(supabaseStorePath, 'utf8');
      
      if (content.includes('signInWithGoogle')) {
        console.log('‚úÖ Funci√≥n signInWithGoogle encontrada');
      } else {
        issues.push('‚ùå Funci√≥n signInWithGoogle no encontrada');
      }
      
      if (content.includes('signInWithOAuth')) {
        console.log('‚úÖ signInWithOAuth implementado');
      } else {
        issues.push('‚ùå signInWithOAuth no implementado');
      }
      
      if (content.includes("provider: 'google'")) {
        console.log('‚úÖ Proveedor Google configurado');
      } else {
        issues.push('‚ùå Proveedor Google no configurado');
      }
      
      if (content.includes('redirectTo')) {
        console.log('‚úÖ redirectTo configurado');
      } else {
        issues.push('‚ùå redirectTo no configurado');
      }
      
      // Verificar manejo de errores
      if (content.includes('console.error') && content.includes('signInWithGoogle')) {
        console.log('‚úÖ Manejo de errores implementado');
      } else {
        issues.push('‚ö†Ô∏è  Manejo de errores podr√≠a mejorarse');
      }
      
    } else {
      issues.push('‚ùå Archivo supabaseStore.ts no encontrado');
    }
    
    // Verificar p√°gina de login
    const loginPath = 'src/app/(auth)/login/page.tsx';
    if (fs.existsSync(loginPath)) {
      const content = fs.readFileSync(loginPath, 'utf8');
      
      if (content.includes('signInWithGoogle')) {
        console.log('‚úÖ Bot√≥n de Google en p√°gina de login');
      } else {
        issues.push('‚ùå Bot√≥n de Google no encontrado en login');
      }
      
      if (content.includes('handleGoogleSignIn')) {
        console.log('‚úÖ Handler de Google OAuth en login');
      } else {
        issues.push('‚ùå Handler de Google OAuth no encontrado en login');
      }
      
      if (content.includes('loading')) {
        console.log('‚úÖ Estado de carga manejado en login');
      } else {
        issues.push('‚ö†Ô∏è  Estado de carga no manejado en login');
      }
      
    } else {
      issues.push('‚ùå P√°gina de login no encontrada');
    }
    
    // Verificar p√°gina de registro
    const registroPath = 'src/app/(auth)/registro/page.tsx';
    if (fs.existsSync(registroPath)) {
      const content = fs.readFileSync(registroPath, 'utf8');
      
      if (content.includes('signInWithGoogle')) {
        console.log('‚úÖ Bot√≥n de Google en p√°gina de registro');
      } else {
        issues.push('‚ùå Bot√≥n de Google no encontrado en registro');
      }
      
      if (content.includes('handleGoogleSignUp')) {
        console.log('‚úÖ Handler de Google OAuth en registro');
      } else {
        issues.push('‚ùå Handler de Google OAuth no encontrado en registro');
      }
      
    } else {
      issues.push('‚ùå P√°gina de registro no encontrada');
    }
    
    // Verificar SupabaseProvider
    const providerPath = 'src/components/SupabaseProvider.tsx';
    if (fs.existsSync(providerPath)) {
      const content = fs.readFileSync(providerPath, 'utf8');
      
      if (content.includes('onAuthStateChange')) {
        console.log('‚úÖ Auth state change listener configurado');
      } else {
        issues.push('‚ùå Auth state change listener no configurado');
      }
      
      if (content.includes('SIGNED_IN')) {
        console.log('‚úÖ Manejo de SIGNED_IN implementado');
      } else {
        issues.push('‚ùå Manejo de SIGNED_IN no implementado');
      }
      
    } else {
      issues.push('‚ùå SupabaseProvider no encontrado');
    }
    
    if (issues.length === 0) {
      console.log('‚úÖ Implementaci√≥n en c√≥digo correcta');
      return true;
    } else {
      console.log('\n‚ö†Ô∏è  Problemas encontrados en implementaci√≥n:');
      issues.forEach(issue => console.log(`   ${issue}`));
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Error verificando implementaci√≥n:', error.message);
    return false;
  }
}

async function checkEnvironmentVariables() {
  console.log('\n3Ô∏è‚É£ VERIFICANDO VARIABLES DE ENTORNO');
  console.log('=' .repeat(60));
  
  const requiredVars = [
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY'
  ];
  
  const optionalVars = [
    'NEXT_PUBLIC_GOOGLE_CLIENT_ID'
  ];
  
  let allRequired = true;
  
  console.log('üìã Variables requeridas:');
  requiredVars.forEach(varName => {
    const value = process.env[varName];
    if (value) {
      console.log(`   ‚úÖ ${varName}: ${value.substring(0, 20)}...`);
    } else {
      console.log(`   ‚ùå ${varName}: NO CONFIGURADA`);
      allRequired = false;
    }
  });
  
  console.log('\nüìã Variables opcionales:');
  optionalVars.forEach(varName => {
    const value = process.env[varName];
    if (value) {
      console.log(`   ‚úÖ ${varName}: ${value.substring(0, 20)}...`);
    } else {
      console.log(`   ‚ö†Ô∏è  ${varName}: NO CONFIGURADA (opcional)`);
    }
  });
  
  return allRequired;
}

async function checkCommonOAuthIssues() {
  console.log('\n4Ô∏è‚É£ VERIFICANDO PROBLEMAS COMUNES DE OAUTH');
  console.log('=' .repeat(60));
  
  const issues = [];
  
  try {
    // Verificar que el dominio est√© configurado correctamente
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    if (supabaseUrl) {
      console.log(`‚úÖ Supabase URL configurada: ${supabaseUrl}`);
      
      // Verificar que sea HTTPS en producci√≥n
      if (supabaseUrl.includes('https://')) {
        console.log('‚úÖ URL usa HTTPS (requerido para OAuth)');
      } else {
        issues.push('‚ö†Ô∏è  URL no usa HTTPS (puede causar problemas en producci√≥n)');
      }
    } else {
      issues.push('‚ùå Supabase URL no configurada');
    }
    
    // Verificar configuraci√≥n de redirecci√≥n
    console.log('\nüîó URLs de redirecci√≥n recomendadas:');
    console.log('   - http://localhost:3000/dashboard (desarrollo)');
    console.log('   - https://tu-dominio.com/dashboard (producci√≥n)');
    console.log('   - https://tu-dominio.com/auth/callback (si es necesario)');
    
    // Verificar que el trigger de perfiles est√© activo
    console.log('\n‚ö° Verificando trigger de perfiles...');
    
    // Intentar crear un usuario de prueba para verificar el trigger
    const testEmail = `test-oauth-${Date.now()}@wellpoint.com`;
    const { data: { user }, error: createError } = await supabase.auth.admin.createUser({
      email: testEmail,
      password: 'TestPassword123!',
      email_confirm: true,
      user_metadata: {
        full_name: 'Test OAuth User',
        nombre: 'Test',
        apellidos: 'OAuth',
        role: 'professional'
      }
    });
    
    if (createError) {
      console.error('‚ùå Error creando usuario de prueba:', createError.message);
      issues.push('‚ùå No se pudo crear usuario de prueba');
    } else {
      console.log('‚úÖ Usuario de prueba creado:', user.id);
      
      // Verificar que el perfil se cre√≥ autom√°ticamente
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();
      
      if (profileError) {
        console.error('‚ùå Error verificando perfil:', profileError.message);
        issues.push('‚ùå Trigger de perfiles no funciona correctamente');
      } else {
        console.log('‚úÖ Perfil creado autom√°ticamente por trigger');
        console.log(`   - Role: ${profile.role}`);
        console.log(`   - Email: ${profile.email}`);
      }
      
      // Limpiar usuario de prueba
      await supabase
        .from('profiles')
        .delete()
        .eq('id', user.id);
      
      await supabase.auth.admin.deleteUser(user.id);
      console.log('‚úÖ Usuario de prueba limpiado');
    }
    
    if (issues.length === 0) {
      console.log('‚úÖ No se encontraron problemas comunes');
      return true;
    } else {
      console.log('\n‚ö†Ô∏è  Problemas comunes encontrados:');
      issues.forEach(issue => console.log(`   ${issue}`));
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Error verificando problemas comunes:', error.message);
    return false;
  }
}

async function generateDebuggingSteps() {
  console.log('\n5Ô∏è‚É£ PASOS PARA DEBUGGING');
  console.log('=' .repeat(60));
  
  console.log('\nüîß Pasos para solucionar problemas de Google OAuth:');
  console.log('\n1. Verificar configuraci√≥n en Supabase Dashboard:');
  console.log('   - Ir a Authentication > Providers');
  console.log('   - Verificar que Google est√© habilitado ‚úÖ');
  console.log('   - Verificar Client ID y Client Secret configurados ‚úÖ');
  console.log('   - Copiar la Redirect URL mostrada');
  
  console.log('\n2. Verificar configuraci√≥n en Google Cloud Console:');
  console.log('   - Ir a Credentials > OAuth 2.0 Client IDs');
  console.log('   - Verificar Authorized JavaScript origins:');
  console.log('     * http://localhost:3000 (desarrollo)');
  console.log('     * https://tu-dominio.com (producci√≥n)');
  console.log('   - Verificar Authorized redirect URIs:');
  console.log('     * La URL copiada de Supabase');
  console.log('     * http://localhost:3000/dashboard (desarrollo)');
  console.log('     * https://tu-dominio.com/dashboard (producci√≥n)');
  
  console.log('\n3. Verificar en el navegador:');
  console.log('   - Abrir Developer Tools (F12)');
  console.log('   - Ir a la pesta√±a Console');
  console.log('   - Intentar login con Google');
  console.log('   - Revisar errores en la consola');
  
  console.log('\n4. Verificar en Supabase Dashboard:');
  console.log('   - Ir a Authentication > Users');
  console.log('   - Verificar si el usuario se cre√≥');
  console.log('   - Ir a Table Editor > profiles');
  console.log('   - Verificar si el perfil se cre√≥ autom√°ticamente');
  
  console.log('\n5. Problemas espec√≠ficos del error "client-side exception":');
  console.log('   - Verificar que window.location.origin est√© disponible');
  console.log('   - Verificar que el componente se renderice correctamente');
  console.log('   - Verificar que no haya errores de JavaScript');
  console.log('   - Verificar que las dependencias est√©n instaladas');
}

async function main() {
  console.log('üîç DIAGN√ìSTICO DE PROBLEMAS DE GOOGLE OAUTH - WELLPOINT');
  console.log('=' .repeat(60));
  
  const results = [];
  
  // Verificar configuraci√≥n de Supabase
  const supabaseConfigOk = await checkSupabaseOAuthConfig();
  results.push({ test: 'Configuraci√≥n Supabase OAuth', success: supabaseConfigOk });
  
  // Verificar implementaci√≥n en c√≥digo
  const codeImplementationOk = await checkCodeImplementation();
  results.push({ test: 'Implementaci√≥n en c√≥digo', success: codeImplementationOk });
  
  // Verificar variables de entorno
  const envVarsOk = await checkEnvironmentVariables();
  results.push({ test: 'Variables de entorno', success: envVarsOk });
  
  // Verificar problemas comunes
  const commonIssuesOk = await checkCommonOAuthIssues();
  results.push({ test: 'Problemas comunes', success: commonIssuesOk });
  
  // Generar pasos de debugging
  await generateDebuggingSteps();
  
  // Resumen final
  console.log('\nüìã RESUMEN DE DIAGN√ìSTICO');
  console.log('=' .repeat(60));
  
  results.forEach(result => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${result.test}`);
  });
  
  const allSuccess = results.every(r => r.success);
  
  if (allSuccess) {
    console.log('\nüéâ ¬°LA CONFIGURACI√ìN DE OAUTH PARECE CORRECTA!');
    console.log('El problema podr√≠a estar en:');
    console.log('1. Configuraci√≥n espec√≠fica en Google Cloud Console');
    console.log('2. URLs de redirecci√≥n no coinciden');
    console.log('3. Error en el navegador (revisar consola)');
    console.log('4. Problema temporal de red o servicio');
  } else {
    console.log('\n‚ö†Ô∏è  SE ENCONTRARON PROBLEMAS EN LA CONFIGURACI√ìN');
    console.log('Revisa los errores anteriores y sigue los pasos de debugging.');
  }
  
  console.log('\nüîß PR√ìXIMOS PASOS:');
  console.log('1. Revisar la consola del navegador para errores espec√≠ficos');
  console.log('2. Verificar configuraci√≥n en Google Cloud Console');
  console.log('3. Verificar URLs de redirecci√≥n en Supabase');
  console.log('4. Probar en modo inc√≥gnito del navegador');
  console.log('5. Verificar que no haya bloqueadores de anuncios interfiriendo');
}

// Ejecutar el script
main().catch(console.error);
